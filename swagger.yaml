# @format
openapi: 3.0.0
servers:
    - description: Development
      url: http://localhost:4000/api
info:
    description: This is a ecommerce API
    version: "1.0.0"
    title: Ecommerce API
    contact:
        email: alhabib607273@gmail.com
    license:
        name: Apache 2.0
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
    - name: Product
      description: Product Endpoints
    - name: Order
      description: Order Endpointsss
    - name: Payment
      description: Payment Endpoints
    - name: Review
      description: Review Endpoints
    - name: ShippingAddress
      description: shipping_address Endpoints
paths:
    /shipping-addresses:
        post:
            description: "Create a new shipping address"
            tags: [ShippingAddress]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ShippingAddress"
            responses:
                "201":
                    description: Shipping address created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ShippingAddress"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

    /shipping-addresses/{id}:
        get:
            description: Retrive a single shipping address
            tags: [ShippingAddress]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Return a single shipping address
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ShippingAddress"
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        put:
            description: Update a shipping address
            tags: [ShippingAddress]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/ShippingAddress"
            responses:
                "200":
                    description: Shipping address updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ShippingAddress"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        delete:
            description: Delete a shipping address
            tags: [ShippingAddress]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Shipping address deleted successfully
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

    /users/{id}/shipping-address:
        get:
            description: Retrive all shipping_address
            tags: [ShippingAddress]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Return a  shipping_address
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/ShippingAddress"
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

    /users/{id}/products:
        get:
            description: Retrive all products
            tags: [Product]
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/sortTypeParam"
                - $ref: "#/components/parameters/sortByParam"
                - $ref: "#/components/parameters/searchParam"
            responses:
                "200":
                    description: Return a list of products
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Product"

                                    pagination:
                                        $ref: "#/components/schemas/Pagination"
                                    links:
                                        type: object
                                        properties:
                                            self:
                                                type: string
                                                format: url
                                                example: /products?page=2&limit=5
                                            next:
                                                type: string
                                                format: url
                                                example: /products?page=3&limit=5
                                            prev:
                                                type: string
                                                format: url
                                                example: /products?page=1&limit=5
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

    /products:
        get:
            description: Retrive all products
            tags: [Product]
            parameters:
                - $ref: "#/components/parameters/pageParam"
                - $ref: "#/components/parameters/limitParam"
                - $ref: "#/components/parameters/sortTypeParam"
                - $ref: "#/components/parameters/sortByParam"
                - $ref: "#/components/parameters/searchParam"
            responses:
                "200":
                    description: Return a list of products
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Product"

                                    pagination:
                                        $ref: "#/components/schemas/Pagination"
                                    links:
                                        type: object
                                        properties:
                                            self:
                                                type: string
                                                format: url
                                                example: /products?page=2&limit=5
                                            next:
                                                type: string
                                                format: url
                                                example: /products?page=3&limit=5
                                            prev:
                                                type: string
                                                format: url
                                                example: /products?page=1&limit=5
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        post:
            description: Create a new product
            tags: [Product]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Product"
            responses:
                "201":
                    description: Product created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Product"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
    /products/{id}:
        get:
            description: Retrive a single product
            tags: [Product]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Return a single product
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Product"
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

        put:
            description: Update a product
            tags: [Product]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Product"
            responses:
                "200":
                    description: Product updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Product"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        delete:
            description: Delete a product
            tags: [Product]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Product deleted successfully
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
    /products/{id}/reviews:
        get:
            description: Retrive all reviews of a product
            tags: [Product]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Return a list of reviews
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Review"
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
    /reviews:
        post:
            description: Create a new review
            tags: [Review]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Review"
            responses:
                "201":
                    description: Review created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Review"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

    /reviews/{id}:
        get:
            description: Retrive a single review
            tags: [Review]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Return a single review
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Review"
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        put:
            description: Update a review
            tags: [Review]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Review"
            responses:
                "200":
                    description: Review updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Review"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        delete:
            description: Delete a review
            tags: [Review]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Review deleted successfully
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

    /orders:
        get:
            description: Retrive all orders
            tags: [Order]
            responses:
                "200":
                    description: Return a list of orders
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    data:
                                        type: array
                                        items:
                                            $ref: "#/components/schemas/Order"
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        post:
            description: Create a new order
            tags: [Order]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Order"
            responses:
                "201":
                    description: Order created successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Order"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
    /orders/{id}:
        get:
            description: Retrive a single order
            tags: [Order]
            parameters:
                - $ref: "#/components/parameters/idPathParam"
            responses:
                "200":
                    description: Return a single order
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Order"
                "400":
                    $ref: "#/components/responses/400"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        put:
            description: Update a order
            tags: [Order]
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Order"
            responses:
                "200":
                    description: Order updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Order"
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"
        delete:
            description: Delete a order
            tags: [Order]
            responses:
                "200":
                    description: Order deleted successfully
                "400":
                    $ref: "#/components/responses/400"
                "401":
                    $ref: "#/components/responses/401"
                "404":
                    $ref: "#/components/responses/404"
                "500":
                    $ref: "#/components/responses/500"

    #TODO: create payment
    #TODO: get payment

    #TODO: add cart
    #TODO: update cart
    #TODO: delete cart

    /health:
        get:
            description: Check if the server is up and running
            tags: [Health]
            responses:
                "200":
                    description: Server is up and running
                "500":
                    $ref: "#/components/responses/500"

components:
    schemas:
        Order:
            type: object
            properties:
                id:
                    type: string
                    example: 34sdsdf34
                userId:
                    type: string
                    example: 23klsfowerwd
                productId:
                    type: array
                    items:
                        type: string
                        example: 34sdsdf34
                quantity:
                    type: integer
                    format: int32
                    example: 1
                totalAmount:
                    type: integer
                    format: int32
                    example: 5000
                paymentStatus:
                    type: string
                    enum:
                        - PAID
                        - UNPAID
                    default: UNPAID

                orderStatus:
                    type: string
                    enum:
                        - PENDING
                        - CONFIRMED
                        - SHIPPED
                        - DELIVERED
                        - CANCELLED
                    default: PENDING
                shippingAddressId:
                    type: string
                    example: 34sdsdf34

                createdAt:
                    type: string
                    format: date-time
                    example: 2022-01-01T00:00:00.000Z
                updatedAt:
                    type: string
                    format: date-time
                    example: 2022-01-01T00:00:00.000Z

        ShippingAddress:
            type: object
            properties:
                id:
                    type: string
                    example: 34sdsdf34
                userId:
                    type: string
                    example: 23klsfowerwd
                division:
                    type: string
                    example: Dhaka
                district:
                    type: string
                    example: Dhaka
                upzila:
                    type: string
                    example: Motijheel
                postalCode:
                    type: string
                    example: 1000
                phoneNumber:
                    type: string
                    example: 0123456789
                createdAt:
                    type: string
                    format: date-time
                    example: 2022-01-01T00:00:00.000Z
                updatedAt:
                    type: string
                    format: date-time
                    example: 2022-01-01T00:00:00.000Z

        Review:
            type: object
            properties:
                id:
                    type: string
                    example: 34sdsdf34
                userId:
                    type: string
                    example: 23klsfowerwd
                productId:
                    type: string
                    example: 23klsfowerwd
                ratting:
                    type: integer
                    format: int32
                    example: 5
                comment:
                    type: string
                    example: Good book
                createdAt:
                    type: string
                    format: date-time
                    example: 2022-01-01T00:00:00.000Z
                updatedAt:
                    type: string
                    format: date-time
                    example: 2022-01-01T00:00:00.000Z
        Product:
            type: object
            properties:
                id:
                    type: string
                    example: 34sdsdf34
                userId:
                    type: string
                    example: 23klsfowerwd
                name:
                    type: string
                    example: Clean Architecture
                description:
                    type: string
                    example: Craftsmans's Guide to Software Structure and Desing
                price:
                    type: integer
                    format: int32
                    example: 5000
                discount:
                    type: integer
                    format: int32
                    example: 2000
                category:
                    type: string
                    enum:
                        - bag
                        - book
                        - pen
                        - notebook
                    example: book
                images:
                    type: array
                    items:
                        type: string
                        example: https://example.com/image.jpg
                stock:
                    type: integer
                    format: int32
                    example: 10
                rating:
                    type: number
                    example: 4.5
                reviewsCount:
                    type: integer
                    format: int32
                    example: 10
                createdAt:
                    type: string
                    format: date-time
                    example: 2023-01-01T00:00:00.000Z
                updatedAt:
                    type: string
                    format: date-time
                    example: 2023-01-01T00:00:00.000Z

        Pagination:
            type: object
            properties:
                page:
                    type: integer
                    format: int32
                    example: 2
                limit:
                    type: integer
                    format: int32
                    example: 5
                next:
                    type: integer
                    format: int32
                    example: 3
                prev:
                    type: integer
                    format: int32
                    example: 1
                totalPage:
                    type: integer
                    format: int32
                    example: 5
                totalItems:
                    type: integer
                    format: int32
                    example: 30
            required:
                - page
                - limit
                - totalPages
                - totalItems
    parameters:
        pageParam:
            in: query
            name: page
            description: current page number
            required: true
            schema:
                type: integer
                format: int32
                example: 2
        limitParam:
            in: query
            name: limit
            description: maximum items to be returned
            required: true
            schema:
                type: integer
                format: int32
                example: 10
        sortTypeParam:
            in: query
            name: sortType
            description: type of sort (asc or dsc)
            schema:
                type: string
                enum: [asc, desc]
                default: desc
        sortByParam:
            in: query
            name: sortBy
            description: Sort Key
            schema:
                type: string
                enum: [createdAt, updatedAt]
                default: updatedAt
        searchParam:
            in: query
            name: search
            description: Search term
            schema:
                type: string
                description: search
                # example: search
        searchTitle:
            in: query
            name: searchTitle
            description: Search term
            schema:
                type: string
                enum: [none, profile, cover]
                default: none
        idPathParam:
            in: path
            name: id
            required: true
            description: Item Id
            schema:
                type: string
                example: 1d2sf3sf12f31dflsd242df
    responses:
        "500":
            description: Internal Server Error
            content:
                "application/json":
                    schema:
                        type: object
                        properties:
                            code:
                                type: integer
                                format: int32
                                example: 500
                            error:
                                type: string
                                example: Internal Server Error
                            message:
                                type: string
                                example: We are sorry for the inconvenience. Please try again later
        "400":
            description: Bad Request
            content:
                "application/json":
                    schema:
                        type: object
                        properties:
                            code:
                                type: integer
                                format: int32
                                example: 400
                            error:
                                type: string
                                example: Bad Request
                            message:
                                type: string
                                example: Bad Request
        "401":
            description: Unauthorized
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            code:
                                type: integer
                                format: int32
                                example: 401
                            error:
                                type: string
                                example: Unauthorized
                            message:
                                type: string
                                example: You don't have the right permissions
        "404":
            description: Recource Not Found
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                            code:
                                type: integer
                                format: int32
                                example: 404
                            error:
                                type: string
                                example: Not Found
                            message:
                                type: string
                                example: Requested resource not found
