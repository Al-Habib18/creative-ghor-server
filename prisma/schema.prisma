// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String   @id @default(cuid())
  userId       String
  name         String
  description  String
  price        Float
  discount     Float?    // optional
  category     Category
  image        String  //  image URLs
  stock        Int
  rating       Float?  @default(0)
  reviewsCount Int?     @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  reviews      Review[]
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1â€“5
  comment   String
  image     String?  // optional image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product  @relation(fields: [productId], references: [id])
}

enum Category {
  ELECTRONICS
  FASHION
  GROCERY
  BOOKS
  HOME
  TOYS
  // Add your own categories
}

enum OrderStatus {
  CONFIRMED
  PENDING
  CANCELLED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PAID
  UNPAID
}


model Order {
  id                 String              @id @default(cuid())
  userId             String
  shippingAddressId  String
  productIds         String[]
  quantity           Int
  totalAmount        Float
  orderStatus        OrderStatus      @default(PENDING)
  paymentStatus      PaymentStatus    @default(UNPAID)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  shippingAddress    ShippingAddress  @relation(fields: [shippingAddressId], references: [id])
}

model ShippingAddress {
  id           String   @id @default(cuid())
  userId       String
  division     String
  district     String
  upzila       String
  postalCode   String
  phoneNumber  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  orders       Order[]  @relation
}


model Payment {
  id             String   @id @default(cuid())
  orderId        String
  paymentStatus  PaymentStatus
  amount         Float
  currency       String
  transactionId  String   @unique
  paymentMethod  String
  paymentDate    DateTime @default(now())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
